package cn.rtmk.rulemodel.groovy;

import cn.rtmk.commom.interfaces.TimeRuleCalculator;
import cn.rtmk.commom.pojo.UserEvent;
import cn.rtmk.commom.utils.UserEventComparator;
import com.alibaba.fastjson.JSONObject;

import org.apache.flink.api.common.state.MapState;
import org.apache.flink.streaming.api.TimerService;

import org.roaringbitmap.RoaringBitmap;
import redis.clients.jedis.Jedis;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;

/**
 * 事件次数类条件的运算机逻辑
 */
class RuleModel_03_Calculator_Groovy extends TimeRuleCalculator {
    JSONObject ruleDefineParamJsonObject;
    String ruleId;
    RoaringBitmap profileUserBitmap;
    MapState<String, Long> timerState;
    TimerService timerService;
    JSONObject trigEventJsonObject;
    JSONObject checkEventJsonObject;
    long intervalTime;
    int maxMatchCount;
    String checkEventAttribute;
    List<JSONObject> onTimerResList;
    Jedis jedis;

    @Override
    public void setTimeService(MapState<String, Long> timerState, TimerService timerService) {
      this.timerService=timerService;
      this.timerState=timerState;
    }

    @Override
    public void init(JSONObject ruleDefineParamJsonObject, RoaringBitmap profileUserBitmap) {
        this.jedis = new Jedis("doitedu", 6379);

        this.ruleDefineParamJsonObject=ruleDefineParamJsonObject;
        this.profileUserBitmap=profileUserBitmap;

        this.trigEventJsonObject = ruleDefineParamJsonObject.getJSONObject("ruleTrigEvent");
        this.checkEventJsonObject = ruleDefineParamJsonObject.getJSONObject("checkEvent");
        this.checkEventAttribute = checkEventJsonObject.getString("eventAttribute");
        this.intervalTime = ruleDefineParamJsonObject.getLong("interval_time");
        this.maxMatchCount = ruleDefineParamJsonObject.getInteger("rule_match_count");
        this.ruleId = ruleDefineParamJsonObject.getString("ruleId");
        onTimerResList = new ArrayList<JSONObject>();
    }

    @Override
    public List<JSONObject> process(UserEvent userEvent) throws Exception {
        JSONObject resObj = new JSONObject();
        //判断是否是触发事件
        if (UserEventComparator.userEventIsEqualParam(userEvent, trigEventJsonObject)) {
            //计算出要注册的定时器的时间
            long registerTime = timerService.currentProcessingTime() + intervalTime;
            //注册定时器
            timerService.registerProcessingTimeTimer(registerTime);
            //从事件中拿到规则检查条件的事件属性
            String checkEventAttributeValue = userEvent.getProperties().get(this.checkEventAttribute);
            //将定时器注册信息，记录到timerState中
            timerState.put(ruleId+":"+checkEventAttributeValue, registerTime);
            resObj.put("ruleId", ruleId);
            resObj.put("resType","timerReg");
            resObj.put("guid",userEvent.getGuid());
            resObj.put("timestamp",System.currentTimeMillis());
            resObj.put("registerTime",registerTime);
        }
        //判断是否是检查事件
        if(UserEventComparator.userEventIsEqualParam(userEvent, checkEventJsonObject)){
            //从事件中拿到规则检查条件的事件属性
            String checkEventAttributeValue = userEvent.getProperties().get(this.checkEventAttribute);
            //从状态中，查找到之前注册的定时器时间
            Long registerTime = timerState.get(ruleId + ":" + checkEventAttributeValue);
            if(registerTime!=null){
                timerService.deleteProcessingTimeTimer(registerTime);
                timerState.remove(ruleId + ":" + checkEventAttributeValue);
            }
            resObj.put("ruleId", ruleId);
            resObj.put("resType","timerDel");
            resObj.put("guid",userEvent.getGuid());
            resObj.put("timestamp",timerService.currentProcessingTime());
            resObj.put("registerTime",registerTime);
        }
        return Collections.singletonList(resObj);
    }

    /**
     * 
     * @param timestamp 定时器触发时间
     */
    @Override
    public List<JSONObject> onTimer(long timestamp,int guid) throws Exception {
        Iterable<Map.Entry<String, Long>> entries = timerState.entries();
        String attributeValue="";
        for (Map.Entry<String, Long> entry : entries) {
            if (entry.getValue() == timestamp) {
                attributeValue = entry.getKey().split(":")[1];
                break;
            }
        }

        //查询出该用户属性（订单）的规则触达次数
        String realMatchCountStr = jedis.hget(ruleId + ":mcnt",guid+":"+attributeValue);
        int realMatchCount = realMatchCountStr == null ? 0 : Integer.parseInt(realMatchCountStr);

        //如果尚未达到触达上限
        if(realMatchCount<maxMatchCount) {

        //封装要返回的触达结果
        JSONObject resObj = new JSONObject();
        resObj.put("ruleId", ruleId);
        resObj.put("resType", "match");
        resObj.put("guid", guid);
        resObj.put("timestamp", timerService.currentProcessingTime());
        onTimerResList.add(resObj);

        //更新redis中的触达次数
        jedis.hincrBy(ruleId+":mcnt",guid+":"+attributeValue,1);
        
        //再次注册定时器
            long registerTime = this.intervalTime+timestamp;
            timerService.registerProcessingTimeTimer(registerTime);
            timerState.put(ruleId+":"+attributeValue, registerTime);
        }
        return onTimerResList;
    }
}
